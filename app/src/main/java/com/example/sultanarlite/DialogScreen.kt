package com.example.sultanarlite

import android.app.Activity
import android.content.Intent
import android.speech.RecognizerIntent
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun DialogScreen(
    viewModel: MainViewModel,
    altairController: AltairUIController
) {
    val context = LocalContext.current
    var commandText by remember { mutableStateOf("") }
    val uiState by altairController.uiState.collectAsState()

    val speechLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val spokenText = result.data
                ?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
                ?.firstOrNull()

            spokenText?.let {
                commandText = it
                altairController.handleCommand(it)
                Toast.makeText(context, "üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", Toast.LENGTH_SHORT).show()
            }
        }
    }

    Column(
        modifier = Modifier
            .padding(16.dp)
            .fillMaxSize(),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Text(text = "–ì–æ–ª–æ—Å–æ–≤–æ–π –ò–ò –ê–ª—å—Ç–∞–∏—Ä", style = MaterialTheme.typography.headlineSmall)

        // –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
        Button(onClick = {
            val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)
            intent.putExtra(
                RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                RecognizerIntent.LANGUAGE_MODEL_FREE_FORM
            )
            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, "ru-RU")
            speechLauncher.launch(intent)
        }) {
            Text("üéôÔ∏è –ì–æ–≤–æ—Ä–∏ –∫–æ–º–∞–Ω–¥—É")
        }

        // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        OutlinedTextField(
            value = commandText,
            onValueChange = { commandText = it },
            label = { Text("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É...") },
            modifier = Modifier.fillMaxWidth(),
            maxLines = 2,
            singleLine = false
        )

        Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
            Button(onClick = {
                if (commandText.isNotBlank()) {
                    altairController.handleCommand(commandText)
                    commandText = ""
                }
            }) {
                Text("–í—ã–ø–æ–ª–Ω–∏—Ç—å")
            }
            Button(onClick = {
                if (commandText.isNotBlank()) {
                    altairController.speak(commandText)
                }
            }) {
                Text("–û–∑–≤—É—á–∏—Ç—å")
            }
            Button(onClick = {
                altairController.handleCommand("–æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
            }) {
                Text("–û—á–∏—Å—Ç–∏—Ç—å")
            }
        }

        // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
        Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
            Button(onClick = {
                altairController.handleCommand("–¥–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")
            }) {
                Text("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
            }
            Button(onClick = {
                altairController.handleCommand("–ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            }) {
                Text("–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            }
            Button(onClick = {
                altairController.handleCommand("–ø–æ–º–µ–Ω—è–π —Ñ–æ–Ω")
            }) {
                Text("–°–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω")
            }
        }

        Spacer(Modifier.height(8.dp))
        Divider()
        Spacer(Modifier.height(8.dp))

        // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (–∫—Ä–æ–º–µ JSON)
        Text("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:", style = MaterialTheme.typography.titleMedium)
        uiState.commandHistory
            .filter { it.type != com.example.sultanarlite.model.CommandType.JSON }
            .reversed()
            .take(10)
            .forEach {
                Text(
                    "${it.message} [${it.status}] ‚Äî ${it.details ?: ""}",
                    style = MaterialTheme.typography.bodySmall
                )
            }

        // –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        Spacer(Modifier.height(8.dp))
        uiState.textElements.forEach {
            Text(
                it.text,
                color = it.color,
                fontSize = it.fontSize.sp
            )
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        uiState.notifications.forEach {
            Text(
                "‚ö° ${it.text}",
                color = it.color,
                fontSize = it.fontSize.sp
            )
        }
    }
}
